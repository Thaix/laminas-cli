{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"laminas-cli Command-line interface for Laminas projects Installation Via Composer Install the library globally using Composer : $ composer require laminas/laminas-cli Usage $ vendor/bin/laminas-cli Custom command if you want to add any command for Laminas MVC or Mezzio application just implement normal Symfony console command and add register the command for the cli: return [ 'laminas-cli' => [ 'commands' => [ 'package:command-name' => MyCommand::class, ], ], ]; Please remember that if command has some dependencies you should register also factory within the container, for example: return [ 'dependencies' => [ 'factories' => [ MyCommand::class => MyCommandFactory::class, ], ], ];","title":"Home"},{"location":"#laminas-cli","text":"Command-line interface for Laminas projects","title":"laminas-cli"},{"location":"#installation","text":"","title":"Installation"},{"location":"#usage","text":"$ vendor/bin/laminas-cli","title":"Usage"},{"location":"#custom-command","text":"if you want to add any command for Laminas MVC or Mezzio application just implement normal Symfony console command and add register the command for the cli: return [ 'laminas-cli' => [ 'commands' => [ 'package:command-name' => MyCommand::class, ], ], ]; Please remember that if command has some dependencies you should register also factory within the container, for example: return [ 'dependencies' => [ 'factories' => [ MyCommand::class => MyCommandFactory::class, ], ], ];","title":"Custom command"},{"location":"intro/","text":"Introduction laminas-cli is a command-line interface for Laminas projects. It provides seamless integration with Laminas MVC and Mezzio applications. It is easily extensible by custom command. Integration with component If you'd like to add integration with laminas-cli into your components you have to the following: Use laminas/laminas-cli as dev dependency: $ composer require --dev laminas/laminas-cli Add the command to the library: namespace MyNamespace\\Command; use Symfony\\Component\\Console\\Command\\Command; class MyCommand extends Command { // ... } Register your command in the container: return [ 'dependencies' => [ 'invokables' => [ MyNamespace\\Command\\MyCommand::class => MyNamespace\\Command\\MyCommand::class, ], ], ]; and register the command for the cli tool: return [ 'laminas-cli' => [ 'commands' => [ 'package:command-name' => MyNamespace\\Command\\MyCommand::class, ], ], ]; If the component is providing ConfigProvider (for Mezzio applications) please provide above inside: namespace MyNamespace; class ConfigProvider { public function __invoke() : array { return [ 'laminas-cli' => $this->getCliConfig(), 'dependencies' => $this->getDependencyConfig(), ]; } public function getCliConfig() : array { return [ 'commands' => [ Command\\MyCommand::class, ], ]; } public function getDependencyConfig() : array { return [ 'invokables' => [ Command\\MyCommand::class => Command\\MyCommand::class, ], ]; } } In case you want also provide Module class for Laminas MVC: namespace MyNamespace; class Module { public function getConfig() : array { $configProvider = new ConfigProvider(); return [ 'laminas-cli' => $configProvider->getCliConfig(), 'service_manager' => $configProvider->getDependencyConfig(), ]; } } Integration for Other Applications - Custom DI Container laminas-cli supports Laminas MVC and Mezzio application out of the box. If you want to use the tool with different application or you have modified the default configuration and container cannot be detected automatically you can still use the laminas-cli tool. You just need configure your PSR-11 container and provide it that way the tool can detect it. Just create config/container.php file which will return an instance of PSR-11 Container and it should be detected by the tool. Usage To list all available commands run: $ vendor/bin/laminas-cli To execute a specific command run: $ vendor/bin/laminas-cli <command-name>","title":"Introduction"},{"location":"intro/#introduction","text":"laminas-cli is a command-line interface for Laminas projects. It provides seamless integration with Laminas MVC and Mezzio applications. It is easily extensible by custom command.","title":"Introduction"},{"location":"intro/#integration-with-component","text":"If you'd like to add integration with laminas-cli into your components you have to the following: Use laminas/laminas-cli as dev dependency: $ composer require --dev laminas/laminas-cli Add the command to the library: namespace MyNamespace\\Command; use Symfony\\Component\\Console\\Command\\Command; class MyCommand extends Command { // ... } Register your command in the container: return [ 'dependencies' => [ 'invokables' => [ MyNamespace\\Command\\MyCommand::class => MyNamespace\\Command\\MyCommand::class, ], ], ]; and register the command for the cli tool: return [ 'laminas-cli' => [ 'commands' => [ 'package:command-name' => MyNamespace\\Command\\MyCommand::class, ], ], ]; If the component is providing ConfigProvider (for Mezzio applications) please provide above inside: namespace MyNamespace; class ConfigProvider { public function __invoke() : array { return [ 'laminas-cli' => $this->getCliConfig(), 'dependencies' => $this->getDependencyConfig(), ]; } public function getCliConfig() : array { return [ 'commands' => [ Command\\MyCommand::class, ], ]; } public function getDependencyConfig() : array { return [ 'invokables' => [ Command\\MyCommand::class => Command\\MyCommand::class, ], ]; } } In case you want also provide Module class for Laminas MVC: namespace MyNamespace; class Module { public function getConfig() : array { $configProvider = new ConfigProvider(); return [ 'laminas-cli' => $configProvider->getCliConfig(), 'service_manager' => $configProvider->getDependencyConfig(), ]; } }","title":"Integration with component"},{"location":"intro/#integration-for-other-applications-custom-di-container","text":"laminas-cli supports Laminas MVC and Mezzio application out of the box. If you want to use the tool with different application or you have modified the default configuration and container cannot be detected automatically you can still use the laminas-cli tool. You just need configure your PSR-11 container and provide it that way the tool can detect it. Just create config/container.php file which will return an instance of PSR-11 Container and it should be detected by the tool.","title":"Integration for Other Applications - Custom DI Container"},{"location":"intro/#usage","text":"To list all available commands run: $ vendor/bin/laminas-cli To execute a specific command run: $ vendor/bin/laminas-cli <command-name>","title":"Usage"}]}